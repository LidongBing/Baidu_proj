This is a file to record the working precedure of the relation extraction pipeline.

#####2015 July 1#####
1. Preprocess webmd, see the folder: /remote/curtis/baidu/webmd-processed, its readme.txt, and run_pipeline.sh


#####2015 July 7#####
1. Run GPig to process "/remote/curtis/baidu/webmd-processed/webmd_export-2015-06-08T19-34-11_sent_code_parsed.txt" for coord lists and trivial lists ( or length 1+ lists)
   Code: webmd-processed/gpig/listmalt.py
   Run with: webmd-processed/gpig/run_listmalt.sh
   Output: ./gpig/gpig_views/listsWithItems.gp ./gpig/gpig_views/listsAsGraph.gp, ./gpig/gpig_views/listsWithDFeats.gp ./gpig/gpig_views/listWithCFeats.gp, ./gpig/gpig_views/readableLists.gp, 

   Conclusion: get 498867 lists
   

2. Generate trivial list and coord list tok features and bipartite graph by postprocessing the gpig output
   Code: webmd-processed/gpig/PostProcessGPig
   Run With: webmd-processed/gpig/run_PostProcessGPig.sh
   Output: webmd-processed/list-tok-feat/all-list/
           webmd-processed/list-graph/



#####2015 July 10#####
1. Get the brand name, generic name, and section title for each unique sentence ID
   Code: java webmd.Preprocess.SentIDSecMapping webmd_export-2015-06-08T19-34-11_re_clean_ss_code.xml webmd_export-2015-06-08T19-34-11_sentId_info.txt
   Output: webmd_export-2015-06-08T19-34-11_sentId_info.txt

2. Get the list IDs in the form s_xx_yy from hasItem file of webmd.
   In folder /remote/curtis/baidu/webmd-processed/list-graph/
   Run: cat hasItem.cfacts | awk -F '\t' '{print $2}' > listID.txt



#####2015 July 11#####

#####1. NLM section detection and formatting result: /remote/curtis/baidu/mingyanl/0629/result/result2

2. Get a mapping from list ID to unique setence ID.
   Code: /remote/curtis/baidu/webmd-processed/webmd/Preprocess/mingyang/UniqIDMapping
   Run: java webmd.Preprocess.mingyang.UniqIDMapping webmd_export-2015-06-08T19-34-11_sent_code_parsed.txt list-graph/listID.txt listID_SentID_Map.txt

3. Augment the drug name (generic name first, if no exist, brand name) to the list item in the bipartite graph
   Code: /remote/curtis/baidu/webmd-processed/webmd/Preprocess/DrugAugmentGraph.java
   Run: java webmd.Preprocess.DrugAugmentGraph list-graph/hasItem.cfacts list-graph/inList.cfacts listID_SentID_Map.txt webmd_export-2015-06-08T19-34-11_sentId_info.txt list-graph/hasItem.cfacts.aug list-graph/inList.cfacts.aug
   Output: list-graph/hasItem.cfacts.aug list-graph/inList.cfacts.aug


4. Get hasFeature.cfacts and featureOf.cfacts files
   Code: /remote/curtis/baidu/webmd-processed/webmd/Preprocess/GraphFeature.java
   Run: java webmd.Preprocess.GraphFeature ./list-tok-feat/all-list/bow_context.tok_feat listID_SentID_Map.txt webmd_export-2015-06-08T19-34-11_sentId_info.txt list-graph/hasItem.cfacts.aug drug-item-feature/hasFeature.cfacts drug-item-feature/featureOf.cfacts
   Output: drug-item-feature/hasFeature.cfacts drug-item-feature/featureOf.cfacts


================================

For Mingyang

#Seed preprocessing
1. Extract seeds from freebase
   Code: /remote/curtis/baidu/relation-extraction/pipe_line/seed/step1_extract_seed/ExtractRelationSeed.java, /remote/curtis/baidu/relation-extraction/pipe_line/seed/step1_extract_seed/step1.sh
   Run: . step1.sh
   Output: seed_file/seed_extracted/*

2. Match seeds to cfacts. So there are more valid seeds when run proppr
   Code: SeedCfactsEditDistance.java, CheckSeedInCfactsFile.java, run1.sh, run2.sh
   Run: . run1.sh, run2.sh
   Output: seed_file/seed_matched/*

3. First seperate file into single and multi, Second split single seed file into develop and evalution part(1:1), Third split develop seed to test and train(1:4) for 10 runs.
   Code: SeperateSingleMultiRelation.java, DiffPropprSeedForTrainList.java, HoldoutDevelop.java, PropprSeedForTrainTestList.java run.sh
   Run: . run.sh
   Output: seed_file/seed_seperated/*
   
#Run proppr
4. Run SSL with proppr:
   InPut:   cfacts_files:featureOf.cfacts  hasFeature.cfacts  hasItem.cfacts  inList.cfacts (4 cfacts file)
         single_runs (all needed seeds file for 10 runs)
         ssl_LP.ppr(rule file)  
         testBoth.examples  test.examples  testList.examples (3 test file)
   Code: run_diff-runs.sh
   Run: . run_diff-runs.sh
   Output: diff-runs/

#Generate vector for list
4. Generate example with different top lists for classification with the solution of PROPPR, i.e. testList.solutions.txt
   Code: generate_feature_vector/code/PostprocessSSLSolution/ExtractClassifyExample
   Run: code/step1_solution_with_diff_top.sh
   Output: generate_feature_vector/diff-runs/x/FB_seed_100.0p/top{top}_sol_single_class.exmps generate_feature_vector/diff-runs/x/FB_seed_forTestList/top500_sol_single_class.exmps

5. Generating the different types tok features of length 1+ for the test files and train files
   Code: /remote/curtis/baidu/relation-extraction/generate_feature_vector/code/ClassifyExample/TokFeature.java
   Run: code/step2_solution_with_tok_feat.sh
   Output: generate_feature_vector/diff-runs/x/FB_seed_${i}p/top{top}_sol_single_class.tok_feat
     generate_feature_vector/diff-runs/x/FB_seed_forTestList/top500_sol_single_class.tok_feat

6. merge the tok feature files of length 1+ lists in ALL combination
   Code: generate_feature_vector/code/ClassifyExample/TokFeatMerger.java
   Run: step3_merge_tok_feat.sh
   Output: generate_feature_vector/diff-runs/x/FB_seed_1p/xxx_ALL.tok_feat, xxx_WITHOUT_xxx.tok_feat
           generate_feature_vector/diff-runs/x/FB_seed_forTestList/xxx_ALL.tok_feat, xxx_WITHOUT_xxx.tok_feat

7. Generate feature vectors of length 1+ lists  for the training files
   Code: generate_feature_vector/code/ClassifyExample/TrainFeature.java
   Run: step4_train_feat_vec.sh
   Output: generate_feature_vector/diff-runs/x/FB_seed_${i}p/xxx.vec, xxx.dict

8. Generate feature vectors of length 1+ lists  for the testing files
   Code: generate_feature_vector/code/ClassifyExample/TestFeature.java
   Run: step5_test_feat_vec.sh
   Output: generate_feature_vector/diff-runs/x/FB_seed_forTestList/FB_seed_${i}p/xxx.vec

#SVM training and testing


9. 
================================


      
2. Preprocess the NLM data data with section detected, in the same way as for webmd
   NLM data with section: /remote/curtis/baidu/mingyanl/0629/result
   see the folder: /remote/curtis/baidu/NLM-processed and its run_pipeline.sh